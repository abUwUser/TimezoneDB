import type { NextPage } from 'next'
import Head from 'next/head'
import cookie from "cookie"
import Image from 'next/image'
import { useCookies } from 'react-cookie'
import { useEffect, useState } from 'react'
import getUser from '../utils/frontend/getUser'
import { Router, useRouter } from 'next/router'
import { LoginUser, UserWithID } from '..'
import cloneDeep from "../utils/cloneDeep"
import { TimeZoneArg } from 'temporal-polyfill'
import isTimezone from '../utils/isTimezone'

interface HandleChangesType {
    username?: string
    timezone?: TimeZoneArg
    discordID?: string
}

const SignIn: NextPage = () => {
    const router = useRouter();
    const [cookie, setCookie, removeCookie] = useCookies(["user"]);
    const [user, setUser] = useState<UserWithID>();
    const [loginToken, setLoginToken] = useState("");

    const [username, setUsername] = useState("")
    const [timezone, setTimezone] = useState<TimeZoneArg>("");
    const [discordID, setDiscordID] = useState("")
    const [password, setPassword] = useState("")

    useEffect(() => {
        console.log(cookie);
        try {
            if (!cookie?.user?.logintoken) {router.push("/login")}
            setLoginToken(cookie.user.logintoken);

            (async () => {
                const user = await getUser(
                    cookie?.user?.id,
                    cookie?.user?.logintoken
                );
                if (!user) return
                setUser(user)
                setTimezone(user.timezone);
            })();
        } catch (e) {
            router.push("/login");
        }
    }, [])

    const handleChanges = async ({
        username,
        timezone,
        discordID,
    }: HandleChangesType) => {
        try {
            const userClone: LoginUser = cloneDeep(user)
            if (username) {
                const response = await fetch(
                    `${window.location.origin}/api/settings/username`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            logintoken: loginToken,
                            username,
                        }),
                    }
                )
                if (!response.ok) throw new Error(await response.text())

                const { newlogintoken } = await response.json()

                userClone.username = username
                setLoginToken(newlogintoken)
            }

            if (timezone && isTimezone(timezone)) {
                const response = await fetch(
                    `${window.location.origin}/api/settings/timezone`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            logintoken: loginToken,
                            timezone,
                        }),
                    }
                )
                if (!response.ok) throw new Error(await response.text())

                userClone.timezone = timezone
            }

            if (discordID) {
                const response = await fetch(
                    `${window.location.origin}/api/settings/service`,
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            logintoken: loginToken,
                            services: {
                                discord: discordID
                            },
                        }),
                    }
                )
                if (!response.ok) throw new Error(await response.text())

                userClone.services.discord = discordID
            }

            setUser(userClone)

            setCookie(
                "user",
                JSON.stringify(
                    Object.assign({}, userClone, {
                        logintoken: loginToken,
                    })
                ),
                {
                    path: "/",
                    maxAge: 1653320965, // Expires after 1 month
                    sameSite: true,
                }
            )
        } catch (err) {
            console.log(err)
        }
    }

    return (
        <div>
            <Head>
                <title>Dashboard - TimezoneDB</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            {user && (
                <>
                    <h1>Welcome, {user.username}</h1>

                    <div>
                        <label>
                            Set a new username:
                            <input
                                type="text"
                                value={username}
                                placeholder={user.username}
                                onChange={(e) => setUsername(e.target.value)}
                            />
                            <button
                                onClick={() =>
                                    handleChanges({
                                        username,
                                    })
                                }
                            >
                                Set
                            </button>
                        </label>
                    </div>

                    <div>
                        <label>
                            Set a timezone:
                            <input
                                type="text"
                                value={timezone as string}
                                placeholder={user.timezone as string}
                                onChange={(e) => setTimezone(e.target.value)}
                            />
                            <button
                                onClick={() =>
                                    handleChanges({
                                        timezone,
                                    })
                                }
                            >
                                Set
                            </button>
                        </label>
                    </div>

                    <div>
                        <label>
                            Set your Discord ID:
                            <input
                                type="text"
                                value={discordID}
                                placeholder={user.services.discord}
                                onChange={(e) => setDiscordID(e.target.value)}
                            />
                            <button
                                onClick={() =>
                                    handleChanges({
                                        discordID,
                                    })
                                }
                            >
                                Set
                            </button>
                        </label>
                    </div>

                    <button
                        onClick={() => {
                            removeCookie("user")
                            router.push("/login")
                        }}
                    >
                        Log out
                    </button>
                </>
            )}
        </div>
    )
}

SignIn.getInitialProps = async ({ req }) => {
    const data = cookie.parse(req ? req.headers.cookie || "" : document.cookie)

    return {
        data: data && data,
    }
}

export default SignIn